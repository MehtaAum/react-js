// =============================
// 📘 REDUX TOOLKIT (RTK) NOTES
// =============================

// 🔹 What is Redux Toolkit?
// - Redux Toolkit (RTK) is the official, recommended way to use Redux.
// - It is a **state management library** for React.
// - It makes Redux easier, faster, and less code-heavy.
// - Think of it like: "Redux, but with shortcuts and less headache."

// ====================================
// 🔹 Why use Redux Toolkit instead of React state (useState/useReducer)?
// ====================================

// React Normal State (useState, useReducer):
// ✅ Good for small apps or local state (like handling form input, toggle buttons).
// ❌ Problem starts when:
//   - Many components need the same state (prop drilling issue).
//   - Complex state logic (like todos, shopping cart, authentication).
//   - Data needs to stay consistent across the app.
//   - Debugging state history (what changed, when, why) is difficult.

// Redux Toolkit (Global State):
// ✅ Centralized store → one "global brain" for all components.
// ✅ No prop drilling → any component can access/update data via store.
// ✅ Cleaner code → less boilerplate than old Redux, more structured than just hooks.
// ✅ Easy debugging → works with Redux DevTools (time travel, action logs).
// ✅ Scales better for medium → large apps (multiple features, multiple states).
// ❌ Slightly more setup compared to plain React hooks (but worth it for big apps).

// Simple analogy:
// - useState = You keep notes on sticky papers for yourself.
// - RTK = You keep all notes in a shared notebook where everyone can read/write in order.

// ====================================
// 🔹 MAIN BUILDING BLOCKS IN RTK
// ====================================

// 1) configureStore()
// - Instead of createStore in old Redux, we use configureStore.
// - Automatically sets up good defaults (like Redux DevTools).
// - We put all slices (reducers) inside configureStore.

// Example:
// const store = configureStore({
//   reducer: { counter: counterReducer }
// });

// -----------------------------

// 2) createSlice()
// - A "slice" = collection of reducer logic + actions for a feature.
// - Example: a "counterSlice" for counter, "todoSlice" for todos.
// - It auto-creates action creators and action types for you.
// - Inside createSlice → we define name, initialState, reducers.

// Example:
// const counterSlice = createSlice({
//   name: "counter",
//   initialState: { value: 0 },
//   reducers: {
//     increment: (state) => { state.value += 1 },
//     decrement: (state) => { state.value -= 1 },
//     reset: (state) => { state.value = 0 }
//   }
// });

// export const { increment, decrement, reset } = counterSlice.actions;
// export default counterSlice.reducer;

// -----------------------------

// 3) useSelector()
// - Hook to read data from the store inside React components.
// - Think: "Which piece of global state do I want to read?"

// Example:
// const count = useSelector((state) => state.counter.value);

// -----------------------------

// 4) useDispatch()
// - Hook to send actions (trigger changes) to the store.
// - Think: "Tell Redux to update/change something."

// Example:
// const dispatch = useDispatch();
// dispatch(increment()); // will increase counter

// -----------------------------

// 5) Reducers in RTK
// - Reducers are functions that update the state.
// - In RTK, thanks to immer.js, we can write "mutating style" code (state.value += 1)
//   but it still keeps immutability under the hood.
// - No need to return new state manually, RTK handles it.

// -----------------------------

// 6) Action Creators
// - In plain Redux, you manually write functions to create actions.
// - In RTK, createSlice auto-generates them for you.
// - Example: "increment" in reducers → becomes an action creator automatically.

// -----------------------------

// 7) Reducer Combination
// - If multiple slices exist, we combine them in configureStore.
// - Example:
// const store = configureStore({
//   reducer: {
//     counter: counterReducer,
//     todos: todoReducer
//   }
// });

// -----------------------------

// 8) DevTools Support
// - configureStore automatically sets up Redux DevTools (browser extension).
// - Helps in debugging, checking actions, and state changes.

// ====================================
// 🔹 In Simple Terms (Layman):
// ====================================
// - Redux Toolkit is like a **shared notebook (store)** for your app’s state.
// - Instead of each component having its own "sticky notes" (useState),
//   you keep all data in one place, easy to access and update.
// - This prevents confusion, duplication, and messy prop drilling.
// - RTK automatically gives you actions, reducers, and DevTools support.
// - RTK = Less boilerplate, more organized, perfect for medium/large apps.

// =============================
// 🎯 Quick Summary:
// - useState/useReducer → best for small/local state
// - Redux Toolkit → best for global/shared state in medium/large apps
// - configureStore → setup store
// - createSlice → create state + reducers + actions
// - useSelector → read data
// - useDispatch → update data
// =============================
